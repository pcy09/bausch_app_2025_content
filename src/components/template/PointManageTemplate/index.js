import { Buttons, CardContainer, DividingLine, RowGrid } from '@/components/atom';
import NoticeLabel from '@/components/atom/Notice';
import { useEffect, useState } from 'react';
import PointManageListSection from '@/components/molecules/DevCreatement_kyj/PointManageListSection';
import { marginLeftStyle, marginRightStyle } from '@/styles/components/atomCommonStyle';
import { useRouter } from 'next/router';
import { useDispatch, useSelector } from 'react-redux';
import { deleteSavingPointAction, getSavingPointAction, resetSavingPointAction } from '@/store/reducers/admin/savingPointReducer';
import useAddKeyList from '@/hooks/useAddKeyList';
import { ExclamationCircleOutlined } from '@ant-design/icons';
import { Modal } from 'antd';

const PointManageTemplate = ({}) => {
  const dispatch = useDispatch();
  const router = useRouter();

  // Ï†ÅÎ¶ΩÍ∏à Î¶¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞

  const savingPointList = useSelector(state => state?.savingPoint.pointProductGroup);

  // key ÏÜçÏÑ±Ïù¥ Ï∂îÍ∞ÄÎêú Î¶¨Ïä§Ìä∏
  const keyedSavingPointList = useAddKeyList(savingPointList, 'pointId', 'pointProductCount');

  // Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÑ†ÌÉù Í∞í
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);

  // Î¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù
  const selectListItem = newSelectedRowKeys => {
    setSelectedRowKeys(newSelectedRowKeys);
  };

  useEffect(() => {
    dispatch(getSavingPointAction());
    return () => {
      dispatch(resetSavingPointAction());
    };
  }, [dispatch]);

  const columns = [
    {
      title: 'Ï†ÅÎ¶ΩÍ∏à Ïù¥Î¶Ñ',
      dataIndex: 'pointName',
      align: 'center',
    },
    {
      title: 'Íµ¨Îß§Í∞ÄÎä• Ï†úÌíà',
      dataIndex: 'pointProductCount',
      align: 'center',
      width: 130,
    },
  ];

  const deleteConfirmHandler = () => {
    Modal.confirm({
      title: 'Ï†ÅÎ¶ΩÍ∏à ÏÇ≠Ï†ú',
      icon: <ExclamationCircleOutlined />,
      content: 'Ï†ÅÎ¶ΩÍ∏à Î™©Î°ùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      okText: 'ÏÇ≠Ï†ú',
      cancelText: 'Ï∑®ÏÜå',
      onOk: handleDelete,
    });
  };

  const handleDelete = () => {
    const sendObject = {
      savingPointId: selectedRowKeys,
    };

    dispatch(deleteSavingPointAction({ sendObject }));
  };

  return (
    <>
      <NoticeLabel title={'üëâüèº Ï†ÅÎ¶ΩÍ∏à Î¶¨Ïä§Ìä∏Ïù¥Î©∞, ÏÉàÎ°úÏö¥ Ïú†ÌòïÏùò Ï†ÅÎ¶ΩÍ∏àÏùÑ Îì±Î°ùÌï† Ïàò ÏûàÏäµÎãàÎã§.'} />
      <DividingLine border={false} />
      <PointManageListSection listData={keyedSavingPointList} columns={columns} selectedRowKeys={selectedRowKeys} onSelectListItem={selectListItem} />

      <DividingLine border={false} />
      <CardContainer>
        <RowGrid justify="space-between">
          <Buttons name={'ÏÇ≠Ï†ú'} type={'danger'} htmlType={'button'} css={marginRightStyle(5)} onClick={deleteConfirmHandler} />
          <Buttons type={'primary'} name={'Ï†ÅÎ¶ΩÍ∏à Îì±Î°ù'} htmlType={'submit'} css={marginLeftStyle(5)} onClick={() => router.push('manage/sub')} />
        </RowGrid>
      </CardContainer>
    </>
  );
};

export default PointManageTemplate;
