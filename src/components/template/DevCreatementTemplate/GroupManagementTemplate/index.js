import { Buttons, CardContainer, DividingLine, RowGrid } from '@/components/atom';
import { DetailPageTitle, PageTitle, ProductGroupAddSection, ProductGroupList } from '@/components/molecules';
import { Tabs } from 'antd';
import { useEffect, useState } from 'react';
import { css } from '@emotion/react';
import { contentsContainerStyle } from '@/styles/components/atomCommonStyle';
import { useRouter } from 'next/router';
import NoticeLabel from '@/components/atom/Notice';
import { useDispatch, useSelector } from 'react-redux';
import { getProductGroupListAction } from '@/store/reducers/admin/productGroupReducer';

const GroupManagementTemplate = ({}) => {
  const dispatch = useDispatch();

  // Í∑∏Î£π Î¶¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞
  const productGroupList = useSelector(state => state?.productGroup.productBauschGroupList);

  const productLenslyGroupList = useSelector(state => state?.productGroup.productLenslyGroupList);

  const [appList, setAppList] = useState([]);
  const [lenslyList, setLenslyList] = useState([]);

  const [appBlock, setAppBlock] = useState(false);
  const [lenslyBlock, setLenslyBlock] = useState(false);

  const router = useRouter();

  const [activeKey, setActiveKey] = useState('BAUSCH');

  // ÌÉ≠ Î©îÎâ¥ Î≥ÄÍ≤Ω Ìï®Ïàò
  const handleTabChange = key => {
    setActiveKey(key);
  };

  // Ï†úÌíà Í∑∏Î£π Î¶¨Ïä§Ìä∏Í∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    if (productGroupList) {
      const result = productGroupList.map(item => ({
        ...item,
        disabled: true, // Î™®Îì† Ìï≠Î™©ÏùÑ Ï¥àÍ∏∞ÏóêÎäî ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
      }));

      setAppList(result);
    }
  }, [productGroupList]);

  useEffect(() => {
    if (productLenslyGroupList) {
      const result = productLenslyGroupList.map(item => ({
        ...item,
        disabled: true, // Î™®Îì† Ìï≠Î™©ÏùÑ Ï¥àÍ∏∞ÏóêÎäî ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
      }));

      setLenslyList(result);
    }
  }, [productLenslyGroupList]);

  // ÌôúÏÑ± ÌÉ≠ Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    dispatch(getProductGroupListAction({ tabTypes: activeKey }));
  }, [dispatch, activeKey]);

  // Í∞Å ÌÉ≠Ïóê ÌëúÏãúÌï† ÎÇ¥Ïö© Ï†ïÏùò
  const children = (list, setList, block, setBlock, activeKey = { activeKey }) => {
    return (
      <>
        {/* Îì±Î°ù */}
        <CardContainer>
          <ProductGroupAddSection list={list} setList={setList} activeKey={activeKey} />
        </CardContainer>
        <DividingLine border={false} />

        {/* Î¶¨Ïä§Ìä∏ */}
        <ProductGroupList list={list} setList={setList} block={block} setBlock={setBlock} activeKey={activeKey} />
        <DividingLine border={false} />

        {/* Î≤ÑÌäº */}
        <CardContainer size={'default'} bordered={false}>
          <RowGrid justify="space-between">
            <Buttons type={'default'} name={'Ïù¥Ï†Ñ'} htmlType={'button'} onClick={() => router.push('/admin/product/manage')} />
          </RowGrid>
        </CardContainer>
      </>
    );
  };

  // ÌÉ≠ Î©îÎâ¥ Î∞∞Ïó¥ ÎßåÎì§Í∏∞
  const tabMenuList = () => {
    return [
      {
        label: 'BAUSCH APP',
        key: 'BAUSCH',
        children: children(appList, setAppList, appBlock, setAppBlock, activeKey),
      },
      {
        label: 'LENSLY',
        key: 'LENSLY',
        children: children(lenslyList, setLenslyList, appBlock, setAppBlock, activeKey),
      },
    ];
  };

  return (
    <>
      <NoticeLabel title={'üëâüèº Î∞îÏäàÎ°¨ Ï†úÌíàÏùò Í∑∏Î£πÏùÑ ÏÑ§Ï†ïÌïòÎäî ÌéòÏù¥ÏßÄÏûÖÎãàÎã§.'} />
      <DividingLine border={false} />
      <Tabs onTabClick={handleTabChange} defaultActiveKey={activeKey} type="line" centered size={'small'} items={tabMenuList()} />
    </>
  );
};

export default GroupManagementTemplate;
