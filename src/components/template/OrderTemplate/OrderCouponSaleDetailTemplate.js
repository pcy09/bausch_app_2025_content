import { Buttons, CardContainer, DividingLine, Form, Tables } from '@/components/atom';
import { Descriptions, Modal } from 'antd';
import { useForm } from 'react-hook-form';
import { descStyle, marginRightStyle } from '@/styles/components/atomCommonStyle';
import { css } from '@emotion/react';
import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useRouter } from 'next/router';
import NoticeLabel from '@/components/atom/Notice';
import { TradeStatus } from '@/components/atom/TableAtoms';
import { couponOrderResetAction, deleteCouponSalesDetailAction, getCouponSalesDetailAction } from '@/store/reducers/admin/couponOrderReducer';
import { getModalDropDataAction, openModalBox } from '@/store/reducers/admin/modalBoxReducer';
import { ExclamationCircleOutlined } from '@ant-design/icons';

const OrderCouponSaleDetailTemplate = () => {
  // Ï†úÌíà Ï†ïÎ≥¥
  const productColumns = [
    {
      title: 'ID',
      dataIndex: 'transactionProductId',
      align: 'center',
    },
    {
      title: 'Ï†úÌíà Ïú†Ìòï',
      dataIndex: 'productType',
      align: 'center',
    },
    {
      title: 'Ï†úÌíàÎ™Ö',
      dataIndex: 'productName',
      align: 'center',
    },
    {
      title: 'SKU',
      dataIndex: 'sku',
      align: 'center',
    },
    {
      title: 'Í∑ºÏãú',
      dataIndex: 'myopia',
      align: 'center',
    },
    {
      title: 'ÎÇúÏãú',
      dataIndex: 'asti',
      align: 'center',
    },
    {
      title: 'Ï∂ï',
      dataIndex: 'axis',
      align: 'center',
    },
    {
      title: 'ADD',
      dataIndex: 'add',
      align: 'center',
    },
    {
      title: 'ÌåêÎß§Ïùº',
      dataIndex: 'transactionDate',
      align: 'center',
    },
    {
      title: 'Ï†úÌíà Ïò§Îçî ÏÉÅÌÉú',
      dataIndex: 'orderStatus',
      align: 'center',
      render: (data, record) => <TradeStatus status={data} />,
    },
    {
      title: 'ÏûêÎèôÎ∞úÏ£º',
      dataIndex: 'autoOrderStatus',
      align: 'center',
    },
    {
      title: 'Ï†úÌíà Î≥ÄÍ≤Ω',
      dataIndex: 'transactionProductId',
      align: 'center',
      render: (data, record) => (
        <Buttons
          disabled={isDisabled}
          onClick={() => {
            handleChangeProduct(record);
          }}
          name={'Î≥ÄÍ≤Ω'}
        />
      ),
    },
  ];
  // Ï†úÌíà Î≥ÄÍ≤Ω Ïù¥Î†•
  const updateColumns = [
    {
      title: 'Ï†úÌíà Ïú†Ìòï',
      dataIndex: 'productType',
      align: 'center',
    },
    {
      title: 'Ï†úÌíàÎ™Ö',
      dataIndex: 'productName',
      align: 'center',
    },
    {
      title: 'SKU',
      dataIndex: 'sku',
      align: 'center',
    },
    {
      title: 'Í∑ºÏãú',
      dataIndex: 'myopia',
      align: 'center',
    },
    {
      title: 'ÎÇúÏãú',
      dataIndex: 'asti',
      align: 'center',
    },
    {
      title: 'Ï∂ï',
      dataIndex: 'axis',
      align: 'center',
    },
    {
      title: 'ADD',
      dataIndex: 'add',
      align: 'center',
    },
    {
      title: 'ÏûêÎèôÎ∞úÏ£º',
      dataIndex: 'autoOrderStatus',
      align: 'center',
    },
    {
      title: 'Î≥ÄÍ≤ΩÏùº',
      dataIndex: 'updateProductDate',
      align: 'center',
    },
    {
      title: 'Î≥ÄÍ≤ΩÏ†úÌíà',
      dataIndex: 'updateProductName',
      align: 'center',
    },
  ];

  const {
    handleSubmit,
    control,
    setValue,
    formState: { errors },
  } = useForm({});

  const dispatch = useDispatch();
  const router = useRouter();
  const { query, back, push } = router;

  const { couponDetailInfo, couponDetailProductInfo, couponDetailUpdateInfo } = useSelector(state => state?.couponOrder?.couponSalesDetailData);
  const [productContent, setProductContent] = useState([]);
  const [updateContent, setUpdateContent] = useState([]);
  const [isDisabled, setIsDisabled] = useState(false);

  const onSubmit = data => handleModal();
  const onError = errors => console.log('fail', errors);

  // Í±∞ÎûòÏ∑®ÏÜå
  const handleCancelData = () => {
    dispatch(deleteCouponSalesDetailAction({ id: query?.id, callback: router }));
  };

  // Í±∞ÎûòÏ∑®ÏÜå Î™®Îã¨
  const handleModal = () => {
    Modal.confirm({
      title: 'Í±∞Îûò Ï∑®ÏÜå',
      icon: <ExclamationCircleOutlined style={{ color: 'red' }} />,
      content: 'Í±∞ÎûòÎ•º Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      okText: 'ÌôïÏù∏',
      cancelText: 'Ï∑®ÏÜå',
      maskClosable: true,
      onOk: () => handleCancelData(),
    });
  };

  // Î∞∞Ïó¥ÏóêÏÑú orderStatusÍ∞Ä 'Î∞∞ÏÜ°ÏôÑÎ£å'Ïù∏ Ìï≠Î™©Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
  useEffect(() => {
    const hasDeliveryCompleted = productContent.some(item => item.orderStatus === 'Î∞∞ÏÜ°ÏôÑÎ£å');

    if (hasDeliveryCompleted) {
      setIsDisabled(hasDeliveryCompleted);
    }

    if (couponDetailInfo?.transactionStatus === 'Í±∞ÎûòÏ∑®ÏÜå') {
      setIsDisabled(true);
    }
  }, [productContent, couponDetailInfo]);

  // ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ Ìò∏Ï∂ú
  useEffect(() => {
    if (query.id) {
      dispatch(getCouponSalesDetailAction({ id: query.id }));
    }
    // Ï¥àÍ∏∞Ìôî
    return () => {
      dispatch(couponOrderResetAction());
    };
  }, [query?.id]);

  // tableÏóê key Î∂ÄÏó¨ÌïòÍ∏∞
  useEffect(() => {
    if (couponDetailProductInfo) {
      const filteredProductContent = couponDetailProductInfo.map(item => ({
        ...item,
        key: item.transactionProductId,
      }));
      setProductContent(filteredProductContent);

      const filteredUpdateContent = couponDetailUpdateInfo?.map(item => ({
        ...item,
        key: item.transactionUpdateHistoryId,
      }));
      setUpdateContent(filteredUpdateContent);
    }
  }, [couponDetailProductInfo]);

  // Î≥ÄÍ≤ΩÎ≤ÑÌäº modal
  const handleChangeProduct = record => {
    const data = {
      ...record,
      couponId: couponDetailInfo?.couponId,
      memberId: couponDetailInfo?.memberId,
      transactionInfoId: couponDetailInfo?.transactionInfoId,
    };
    // Î™®Îã¨ Ïó¥Í∏∞
    dispatch(openModalBox({ data }));
    // ÌåêÎß§,Ï¶ùÏ†ïÏ†úÌíà ÎìúÎ°≠ Í∞ÄÏ†∏Ïò§Í∏∞
    const params = {
      couponId: couponDetailInfo?.couponId,
    };
    dispatch(getModalDropDataAction({ params }));
  };

  const handleHeaderSearch = () => {
    console.log('first');
  };

  return (
    <>
      <div css={descStyle}>
        <NoticeLabel title={'üëâüèº Í±∞Îûò ÏÉÅÏÑ∏ ÎÇ¥Ïó≠ ÌéòÏù¥ÏßÄ ÏûÖÎãàÎã§. ÏÉÅÌÉúÏóê Îî∞Îùº Ï†úÌíà Î≥ÄÍ≤Ω Î∞è Ï∑®ÏÜåÌï† Ïàò ÏûàÏäµÎãàÎã§.'} />
      </div>
      <DividingLine border={false} />
      <Form onSubmit={handleSubmit(onSubmit, onError)}>
        {/* Í±∞Îûò Ï†ïÎ≥¥ */}
        <CardContainer>
          <Descriptions title="Í±∞Îûò Ï†ïÎ≥¥" bordered={true} column={3}>
            <Descriptions.Item span={1} label="Í±∞Îûò ID">
              {couponDetailInfo?.transactionCode}
            </Descriptions.Item>
            <Descriptions.Item span={2} label="Í±∞Îûò ÏÉÅÌÉú">
              <TradeStatus status={couponDetailInfo?.transactionStatus} />
            </Descriptions.Item>

            <Descriptions.Item span={1} label="ÏïàÍ≤ΩÏõê Ï†ïÎ≥¥">
              <a
                style={{
                  textDecoration: 'none', // Í∏∞Î≥∏ ÌÖçÏä§Ìä∏ Îç∞ÏΩîÎ†àÏù¥ÏÖò Ï†úÍ±∞
                  borderBottom: '1px solid #04848c', // Î∞ëÏ§Ñ Ìö®Í≥º Ï∂îÍ∞Ä
                }}
                href={`/admin/store/manage/${couponDetailInfo?.storeId}`}
                target="_blank"
                rel="noopener noreferrer"
                onClick={e => {
                  e.stopPropagation(); // Î∂ÄÎ™® ÏöîÏÜåÏùò ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï†ÑÌåå Î∞©ÏßÄ
                }}>
                {couponDetailInfo?.storeInfo}
              </a>
            </Descriptions.Item>
            <Descriptions.Item span={2} label="ÌåêÎß§Ïùº">
              {couponDetailInfo?.transactionDate}
            </Descriptions.Item>

            <Descriptions.Item span={1} label="ÌöåÏõêÎ™Ö">
              <a
                style={{
                  textDecoration: 'none', // Í∏∞Î≥∏ ÌÖçÏä§Ìä∏ Îç∞ÏΩîÎ†àÏù¥ÏÖò Ï†úÍ±∞
                  borderBottom: '1px solid #04848c', // Î∞ëÏ§Ñ Ìö®Í≥º Ï∂îÍ∞Ä
                }}
                href={`/admin/member/${couponDetailInfo?.memberId}`}
                target="_blank"
                rel="noopener noreferrer"
                onClick={e => {
                  e.stopPropagation(); // Î∂ÄÎ™® ÏöîÏÜåÏùò ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï†ÑÌåå Î∞©ÏßÄ
                }}>
                {couponDetailInfo?.memberName}
              </a>
            </Descriptions.Item>
            <Descriptions.Item span={2} label="Ìú¥ÎåÄÌè∞ Î≤àÌò∏">
              {couponDetailInfo?.memberPhone}
            </Descriptions.Item>

            <Descriptions.Item span={1} label="Ïø†Ìè∞ Ïú†Ìòï">
              {couponDetailInfo?.couponType}
            </Descriptions.Item>
            <Descriptions.Item span={2} label="ÏÇ¨Ïö© Ïø†Ìè∞">
              {couponDetailInfo?.couponName}
            </Descriptions.Item>
          </Descriptions>
          <DividingLine border={false} />
        </CardContainer>

        {/* Ï†úÌíà Ï†ïÎ≥¥ */}
        <DividingLine border={false} />
        <CardContainer>
          <Descriptions title="Ï†úÌíà Ï†ïÎ≥¥"></Descriptions>
          <Tables detail={false} listData={productContent} columns={productColumns} />
        </CardContainer>

        {/* Ï†úÌíà Î≥ÄÍ≤Ω Ïù¥Î†• */}
        <DividingLine border={false} />
        <CardContainer bordered={false}>
          <Descriptions title="Ï†úÌíà Î≥ÄÍ≤Ω Ïù¥Î†•"></Descriptions>
          <Tables detail={false} listData={updateContent} columns={updateColumns} />
        </CardContainer>

        {/* ÌïòÎã® */}
        <DividingLine border={false} />
        <CardContainer>
          <div>
            <Buttons type={'default'} name={'Ïù¥Ï†Ñ'} htmlType={'button'} onClick={() => push('/admin/order/coupon-sales')} css={marginRightStyle(5)} />
            <Buttons
              onClick={handleModal}
              type={'default'}
              danger
              name={'Í±∞ÎûòÏ∑®ÏÜå'}
              htmlType={'button'}
              disabled={isDisabled}
              css={marginRightStyle(5)}
            />
          </div>
        </CardContainer>
        <DividingLine border={false} />
      </Form>
    </>
  );
};

export default OrderCouponSaleDetailTemplate;

const buttonRowStyle = css`
  display: flex;
  justify-content: flex-end;
  align-items: center;
`;
